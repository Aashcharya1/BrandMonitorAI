/**
 * @file Firebase Security Rules for BrandGuardian Authentication System
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model,
 * ensuring that only authenticated users can access and modify their own data.
 *
 * @data_structure
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/refreshTokens/{refreshTokenId}: Stores refresh tokens associated with a user.
 *
 * @key_security_decisions
 * - User listing is not allowed.
 * - All write operations require authentication.
 * - Path-based ownership is enforced for all user-related data.
 *
 * @denormalization_for_authorization Not required for this MVP due to the simple data model.  Authorization is based on `request.auth.uid`.
 * @structural_segregation User profiles and refresh tokens are stored in distinct collections with homogeneous security postures.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with ID {userId} (isOwner).
     * @deny (get, create, update, delete) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Verify existing ownership
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow read access only to the owner
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow creation if the user ID matches the authenticated user's ID
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow updates if the user is the owner and the user ID is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletion only to the owner if the document exists
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures refresh tokens, ensuring only the authenticated user can access their own tokens.
     * @path /users/{userId}/refreshTokens/{refreshTokenId}
     * @allow (get, create, update, delete) if the request is made by the user with ID {userId} (isOwner).
     * @deny (get, create, update, delete) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/refreshTokens/{refreshTokenId} {
       // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Verify existing ownership
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow read access only to the owner
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Allow creation if the user ID matches the authenticated user's ID
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow updates if the user is the owner and the userId is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow deletion only to the owner if the document exists
      allow delete: if isExistingOwner(userId);
    }
  }
}